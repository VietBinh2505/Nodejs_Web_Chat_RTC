---------------------------------
1 Tính năng đăng kí:
-dùng package body parser để lấy thông tin người dùng nhập tại form đăng nhập ở folder validator
-dùng package validator để kiểm tra dữ liệu với điều kiện ở folder validator
-nếu có lỗi thì lấy lỗi từ folder lang/vi 
-truyền lỗi ra ngoài view bằng package flash ở folder auth-controller
-Lưu thông tin vào csdl thông qua authservice -> models (xử lý authservice ) nhưng gọi ở controller
-kiểm tra đã đăng nhập hay chưa tại controller/auth hàm check login, nếu đăng nhập rồi thì cho đăng xuất và vào trang chủ, và không vào đăng nhập tiếp
---------------------------------
2 Tính năng đăng nhập(xác thực tài khoản):
a: Với tài khoản Local
-xử lý ở controller/passport
-sau khi lấy được thông tin người dùng nhập tại form đăng nhập và kiểm tra tính hợp lệ ở folder validator
-dùng package passport để kiểm tra dữ liệu có trùng với tài khoản đã đăng kí hay không
-nếu có lỗi thì lấy lỗi từ folder lang/vi 
-truyền lỗi ra ngoài view bằng package flash ở folder auth-controller
b: Với tài khoản Fb
-xử lý ở controller/passport
-xử dụng fb dành cho dev ở web fb tạo tính năng đăng nhập
-xử dụng modul passport-facebook
-lưu thông tin vào csdl, 
-người dùng đăng nhập sẽ tìm kiếm profile.id trong csdl nếu có thì đăng nhập thẳng, nếu chưa có thì tạo người dùng và lưu thông tin
c: Với tài khoản google:
-xử lý ở controller/passport
-xử dụng gg api tạo tính năng đăng nhập
-xử dụng modul passport-gg-aouth
-lưu thông tin vào csdl, 
-người dùng đăng nhập sẽ tìm kiếm profile.id trong csdl nếu có thì đăng nhập thẳng, nếu chưa có thì tạo người dùng và lưu thông tin
---------------------------------
3: Tính năng đăng xuất tài khoản: 
a: Với tài khoản Local: 
-Tạo routes có đường link là /logout trùng với giá trị ở phần views, 
-tại controller vết hàm logout với req.logout để xóa tài khoản lưu trong session,
-thông báo cho người dùng đã đăng xuất thành công và đồng thời chuyển hướng vế trang đăng nhập;
---------------------------------
4: Chức năng up ảnh đại diện,
-tạo 1 route update-avatar , kiểm tra nếu đăng nhập rồi mới cho làm tiếp (routes)
-xử lý upload bằng package multer tại user controller hàm updateavatar
-xử dụng package fs-extra để xóa ảnh cũ khi user thay đổi vì module này hỗ trợ đồng bộ/ bất đồng bộ
---------------------------------
5: Chức năng thay đổi thông tin người dùng-
-tạo 1 route /user/update-userinfo, kiểm tra nếu đăng nhập rồi mới cho làm tiếp
-kiểm tra tính hợp lệ của info ở thư mục uservalidation / validator, 
-xử lý update ở controller / usercontroller
---------------------------------
6: Chức năng tìm kiếm bạn bè:
-tạo 1 route /contact/find-users/:keyword lấy keyword người dùng nhập vào, kiểm tra nếu đăng nhập rồi mới cho làm tiếp
-kiểm tra tính hợp lệ của keyword tại validator / contact
-Lấy id user hiện tại và keyword người dùng nhập vào (contact/controller) gửi qua service xử lý gửi qua contactModel để kết nối database
-xử lý hiện các chức năng ở public/js
---------------------------------
7: Chức năng thêm/xóa yêu cầu kết bạn:
-sau khi tìm kiếm và hiện các user có dữ liệu như keyword, tạo 1 route /contact/add-new, /contact/remove-req-contact
-kiểm tra nếu đăng nhập rồi mới cho làm tiếp
-từ controller lấy id hiện tại và contactid hiện tại gửi qua service xử lý , từ service gửi qua model để kết nối với database
-sử dụng socketio để xử lý gửi lời mời xử lý thông báo ở file addcontact.js/public
-xử lý dữ liệu khi người dùng connect và disconnect ở socketio/contact
---------------------------------
8: Chức năng gửi xử lý thông báo thêm/xóa yêu cầu kết bạn:
-Từ homeController tạo ra 1 biến lưu trữ thông báo, biến có giá trị lấy từ service/getNotifiCations
-Tại getNotifiCations/service xử lý lấy ra toàn bộ thông tin tại database notify,
-Sau đó truyền qua notify model để kiểm tra và ghép dữ liệu và thông báo, và từ homeController truyền qua navbar.ejs
-Đến số thông báo chưa đọc, thiết kế model hiển thị toàn bộ tb:
-Đếm các thông báo có receiverid là id người dùng hiện tại, và isRead = false tại model, 
-trả về giá trị cho countNotifiUnread tại service, từ service trả giá trị cho homeController
-Từ homeController render cho navbar.ejs
---------------------------------
9: Chức năng gửi xử lý đánh dấu tất cả thông báo đã đọc:
-Từ user(file markNotifiAsRead/js/public) bắt sự kiện khi người dùng click vào xem tất cả, lấy toàn bộ uid cho vào 1 mảng
-Truyền dữ liệu qua ser bằng $.ajax với url là /notification/mark-all-as-read
-tạo route tại web/route truyền cho notificationcontroller xử lý tại hàm markAllRead
-từ controller gửi qua service xử lý tại hàm markAllRead
-từ service gửi qua model xử lý tại hàm markAllRead để updateMany truyền vào điều kiện và đổi isread từ false qua true,
- tại view sửa id từ chưa đọc qua đã đọc
---------------------------------
10: